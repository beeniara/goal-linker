
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
   match /savings/{savingsId} {
  allow read: if request.auth != null && 
              (resource.data.userId == request.auth.uid || 
               resource.data.members.hasAny([request.auth.uid]));
  allow create: if request.auth != null;
  allow update: if request.auth != null && 
                (resource.data.userId == request.auth.uid || 
                 resource.data.members.hasAny([request.auth.uid]) ||
                 (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                  exists(/databases/$(database)/documents/savingsInvitations/$(request.resource.data.invitationId)) &&
                  get(/databases/$(database)/documents/savingsInvitations/$(request.resource.data.invitationId)).data.inviteeId == request.auth.uid));
  allow delete: if request.auth != null && 
                (resource.data.userId == request.auth.uid || 
                 resource.data.members.hasAny([request.auth.uid]));
}

    match /savingsInvitations/{invitationId} {
      allow create: if request.auth != null;
      allow list: if request.auth != null;
      allow read, update, delete: if request.auth != null && 
                                   resource.data.inviterId == request.auth.uid;
      allow read: if request.auth != null && 
                   resource.data.inviteeEmail == request.auth.token.email;
      allow update: if request.auth != null && 
                     resource.data.inviteeEmail == request.auth.token.email &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'inviteeId', 'updatedAt']);
      allow get: if request.auth != null;
    }
    
    match /reminders/{reminderId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /support/{supportId} {
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /projects/{projectId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
                                             resource.data.collaborators[request.auth.uid] == true);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /tasks/{taskId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
                                             resource.data.collaborators[request.auth.uid] == true);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }
    
    match /goals/{goalId} {
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || 
                                             resource.data.collaborators[request.auth.uid] == true);
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // Add this new rule for emailNotifications
    match /emailNotifications/{notificationId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && request.resource.data.to == request.auth.token.email;
      allow update, delete: if request.auth != null && resource.data.to == request.auth.token.email;
    }

    match /{document=**} {
      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
  }
}
