rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isAdmin() {
      return isAuthenticated() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Loans collection
    match /loans/{loanId} {
      function isLoanParticipant() {
        return request.auth.uid == resource.data.lenderId || request.auth.uid in resource.data.borrowers.keys();
      }

      function isValidLoanData() {
        let data = request.resource.data;
        return data.keys().hasAll(['name', 'description', 'totalAmount', 'remainingAmount', 'interestRate', 'startDate', 'dueDate', 'status', 'lenderId', 'borrowers', 'createdAt', 'updatedAt']) &&
               data.name is string &&
               data.name.size() > 0 &&
               data.description is string &&
               data.totalAmount is number &&
               data.totalAmount > 0 &&
               data.remainingAmount is number &&
               data.remainingAmount >= 0 &&
               data.interestRate is number &&
               data.interestRate >= 0 &&
               data.startDate is timestamp &&
               (data.dueDate is timestamp || data.dueDate == null) &&
               data.status in ['active', 'paid', 'overdue'] &&
               data.lenderId is string &&
               data.borrowers is map &&
               data.createdAt is timestamp &&
               data.updatedAt is timestamp &&
               data.updatedAt >= data.createdAt;
      }

      function isValidBorrowerData(borrowerId) {
        let borrowerData = request.resource.data.borrowers[borrowerId];
        return borrowerData.keys().hasAll(['amount', 'paidAmount', 'status']) &&
               borrowerData.amount is number &&
               borrowerData.amount > 0 &&
               borrowerData.paidAmount is number &&
               borrowerData.paidAmount >= 0 &&
               borrowerData.paidAmount <= borrowerData.amount &&
               borrowerData.status in ['active', 'paid', 'overdue'];
      }

      function isValidLoanUpdate() {
        let oldData = resource.data;
        let newData = request.resource.data;
        let diff = newData.diff(oldData);
        let affectedKeys = diff.affectedKeys();
        
        // Allow lender to add/update borrowers
        let isLenderUpdate = request.auth.uid == oldData.lenderId &&
                            (affectedKeys.hasOnly(['borrowers', 'remainingAmount', 'updatedAt']) ||
                             affectedKeys.hasOnly(['dueDate', 'status', 'updatedAt'])) &&
                            (newData.dueDate is timestamp || newData.dueDate == null);

        // Allow borrower to update their own payment status
        let isBorrowerUpdate = request.auth.uid in oldData.borrowers &&
                              affectedKeys.hasOnly(['borrowers', 'remainingAmount', 'status', 'updatedAt']) &&
                              newData.borrowers[request.auth.uid].paidAmount >= oldData.borrowers[request.auth.uid].paidAmount &&
                              newData.borrowers[request.auth.uid].paidAmount <= oldData.borrowers[request.auth.uid].amount &&
                              newData.remainingAmount == oldData.remainingAmount - (newData.borrowers[request.auth.uid].paidAmount - oldData.borrowers[request.auth.uid].paidAmount);
        
        return isLenderUpdate || isBorrowerUpdate;
      }

      allow read: if isAuthenticated() && isLoanParticipant();
      allow create: if isAuthenticated() && isValidLoanData() && request.auth.uid == request.resource.data.lenderId;
      allow update: if isAuthenticated() && isLoanParticipant() && isValidLoanUpdate();
      allow delete: if isAuthenticated() && request.auth.uid == resource.data.lenderId && resource.data.remainingAmount == resource.data.totalAmount;
    }

    // Loan Payments collection
    match /loanPayments/{paymentId} {
      function isValidPayment() {
        let data = request.resource.data;
        let loan = get(/databases/$(database)/documents/loans/$(data.loanId));
        let borrowerData = loan.data.borrowers[request.auth.uid];
        
        return data.keys().hasAll(['loanId', 'borrowerId', 'amount', 'paymentDate', 'interest', 'totalAmount', 'createdAt', 'note']) &&
               data.loanId is string &&
               data.borrowerId == request.auth.uid &&
               data.amount is number &&
               data.amount > 0 &&
               data.interest is number &&
               data.interest >= 0 &&
               data.totalAmount is number &&
               data.totalAmount == data.amount + data.interest &&
               data.paymentDate is timestamp &&
               data.paymentDate <= request.time &&
               data.note is string &&
               exists(/databases/$(database)/documents/loans/$(data.loanId)) &&
               borrowerData.status != 'paid' &&
               (borrowerData.paidAmount + data.amount) <= borrowerData.amount;
      }

      function isLoanParticipant() {
        let loan = get(/databases/$(database)/documents/loans/$(resource.data.loanId));
        return request.auth.uid == loan.data.lenderId || request.auth.uid == resource.data.borrowerId;
      }

      allow read: if isAuthenticated() && isLoanParticipant();
      allow create: if isAuthenticated() && isValidPayment() && isLoanParticipant();
      allow update, delete: if false;
    }

    // Loan Transaction History collection
    match /loanTransactions/{transactionId} {
      function isValidTransaction() {
        let data = request.resource.data;
        let loan = get(/databases/$(database)/documents/loans/$(data.loanId));
        
        return data.keys().hasAll(['loanId', 'type', 'amount', 'borrowerId', 'timestamp', 'description', 'createdAt']) &&
               data.loanId is string &&
               data.type in ['payment', 'loan_created', 'borrower_added', 'status_change'] &&
               data.amount is number &&
               data.amount >= 0 &&
               data.borrowerId is string &&
               data.timestamp is timestamp &&
               data.description is string &&
               data.createdAt is timestamp &&
               exists(/databases/$(database)/documents/loans/$(data.loanId)) &&
               (request.auth.uid == loan.data.lenderId || request.auth.uid == data.borrowerId);
      }

      function isLoanParticipant() {
        let loan = get(/databases/$(database)/documents/loans/$(resource.data.loanId));
        return request.auth.uid == loan.data.lenderId || request.auth.uid == resource.data.borrowerId;
      }

      allow read: if isAuthenticated() && isLoanParticipant();
      allow create: if isAuthenticated() && isValidTransaction();
      allow update, delete: if false;
    }

    // Catch-all rule
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}
